<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Random stuff</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://leucos.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="https://leucos.github.io" />
<updated>2015-07-06T16:48:29+02:00</updated>
<id>https://leucos.github.io/</id>
<author>
  <name>Michel Blanc</name>
  <uri>https://leucos.github.io/</uri>
  <email>mb@mbnet.fr</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Laying out roles, inventories and playbooks]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/ansible-files-layout" />
  <id>https://leucos.github.io/ansible-layout</id>
  <published>2015-07-02T00:00:00+02:00</published>
  <updated>2015-07-02T00:00:00+02:00</updated>
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;I have been writing playbooks for quite a while now. Along the way, I
went through various stages, and used different ways to layout Ansible
files. I guess that after going down this trial and error path, I
finally came up with something I will stick to.&lt;/p&gt;

&lt;p&gt;I am not saying that this is the be-all and end-all of Ansible files
layout but may be it will fast forward you to a saner file layout, and
you’ll be able to move on from there. This post will probably help you
if you are new to Ansible, trying to figure out what to put and where.
I hope it will prove usefull if you have some Ansible experience too.&lt;/p&gt;

&lt;h2 id=&quot;some-terminology&quot;&gt;Some terminology&lt;/h2&gt;

&lt;p&gt;In this post, I will mostly talk about 3 things: roles, inventories and
playbooks. Other items do exist (plays, tasks, …) but those 3 elements
shape the big picture of the layout.&lt;/p&gt;

&lt;h3 id=&quot;roles&quot;&gt;Roles&lt;/h3&gt;

&lt;p&gt;A role is a collection of tasks and templates (among other things, but
those are the most common) focused on one very specific goal. For
instance, you can have a role that installs nginx, another that deploys
ssh keys for admins, etc…&lt;/p&gt;

&lt;p&gt;Nginx role will install and configure nginx. Nothing else. It won’t
create DNS entries, trim logs, add a ftp server or anything. It just
installs nginx. Period.&lt;/p&gt;

&lt;h3 id=&quot;inventories&quot;&gt;Inventories&lt;/h3&gt;

&lt;p&gt;An inventory is a list of hosts, eventually assembled into groups, on
which you will run ansible playbooks. Ansible automatically puts all defined
hosts in the aptly named group &lt;code&gt;all&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For instance, you could have hosts &lt;code&gt;www1&lt;/code&gt; and &lt;code&gt;www2&lt;/code&gt;, assembled in group
&lt;code&gt;webservers&lt;/code&gt;, and later reference the group or individual hosts,
depending on your needs.&lt;/p&gt;

&lt;p&gt;Inventories can also come with variables applied to hosts or groups
(including &lt;code&gt;all&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Inventories can be dynamic. If the inventory file is executable, Ansible
will run it and use its output as the inventory (note that, in this
case, the format is not the same as static inventory).&lt;/p&gt;

&lt;p&gt;You can of course have multiple inventories, segregated from each other.
We will take advantage from this later on.&lt;/p&gt;

&lt;h3 id=&quot;playbooks&quot;&gt;Playbooks&lt;/h3&gt;

&lt;p&gt;The last piece of the puzzle is the playbook. The playbook is the pivot
between and inventory and roles. This is where you basically tell
Ansible: &lt;em&gt;please install roles foo, bar and baz on machines alice, bob
and charlie&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;role-layout&quot;&gt;Role layout&lt;/h2&gt;

&lt;p&gt;Role layout is pretty well documented at Ansible website. A role contains
several directories. All directories are optional besides &lt;code&gt;tasks&lt;/code&gt;. For each
directory, the entry point is &lt;code&gt;main.yml&lt;/code&gt;. Thus, the only compulsory file in a
role is &lt;code&gt;tasks/main.yml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-foobar/
├── defaults
│   └── main.yml
├── files
├── handlers
│   └── main.yml
├── meta
│   └── main.yml
├── tasks
│   ├── check_vars.yml
│   ├── foobar.yml
│   └── main.yml
└── templates
    └── foobar.conf.j2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s cover briefly the layout an see the function of each file and
directory.&lt;/p&gt;

&lt;h3 id=&quot;defaultsmainyml&quot;&gt;&lt;code&gt;defaults/main.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This directory contains defaults for variables used in roles. I
encourage you to define every variable used in your role, for several
reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this file will be a nice and always up to date reference list of
settings configuration in your roles&lt;/li&gt;
  &lt;li&gt;having configured variables will prevent your role failing in an
uncontrolled way (more on this later).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If some of these variables are used in templates to generate config
files, I highly encourage you to use your target OS defaults. The principle of
least surprise should apply here.&lt;/p&gt;

&lt;p&gt;Best practices assumes that you are using &lt;em&gt;pseudo-namespacing&lt;/em&gt; for your role’s variables (e.g. for role &lt;code&gt;foobar&lt;/code&gt;, all variables should begin with &lt;code&gt;foobar_&lt;/code&gt;) to avoid collisions with other roles.&lt;/p&gt;

&lt;h3 id=&quot;files&quot;&gt;&lt;code&gt;files/&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This directory holds files that do not require Jinja interpolation, and can be copied as-is on the remote nodes.&lt;/p&gt;

&lt;h3 id=&quot;handlersmainyml&quot;&gt;&lt;code&gt;handlers/main.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is where you define handlers that get notified by tasks. Handlers
are just standard tasks. You can use &lt;code&gt;include&lt;/code&gt; in this file if you want
to separate handlers (for different OSes versions for instances), but
try to keep the file number as low as possible so you don’t end up
hunting down stuff everywhere.&lt;/p&gt;

&lt;p&gt;If your handler restarts any service, you have to make sure that the
service config file is valid before attempting to restart it. Some
daemons allow this (e.g. nginx, haproxy, apache). If your service does
not, provide some fallback mechanism. You don’t want your playbook to
screw up your running system because you typoed a configuration
variable. See the &lt;code&gt;validate&lt;/code&gt; option in the 
&lt;a href=&quot;http://docs.ansible.com/template_module.html&quot;&gt;template module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that handlers are just standard tasks.&lt;/p&gt;

&lt;h3 id=&quot;metamainyml&quot;&gt;&lt;code&gt;meta/main.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This metadata has (AFAIK) only two variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;galaxy_info&lt;/code&gt;: meta information for galaxy about your role. You just
don’t need this if you don intend to push your role to Galaxy. For
details on the format, see TODO: find ref&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;dependencies&lt;/code&gt;: what roles this role depends on.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The latter is of utmost importance, and setting it right deserves a blog
post on it’s own. Until then, the rule of thumb to remember is to &lt;strong&gt;only
include compulsory role dependencies for the target host&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This means that adding &lt;code&gt;nginx&lt;/code&gt; dependency in a &lt;code&gt;php-fpm&lt;/code&gt; role sounds
perfectly reasonable&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. However, adding a &lt;code&gt;mysql&lt;/code&gt; dependency to your
web application role is not, because &lt;code&gt;mysql&lt;/code&gt; can be deployed on another
server.&lt;/p&gt;

&lt;h3 id=&quot;tasksmainyml&quot;&gt;&lt;code&gt;tasks/main.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This file is the tasks entry point. However, it should be mostly empty.
Why ? Because you want to use Ansible tags. Tags are a great way to
limit task execution for an Ansible run, where only tagged tasks are
run.&lt;/p&gt;

&lt;p&gt;For instance, in a playbook that deploys your application, you could
choose to run only tasks regarding nginx.&lt;/p&gt;

&lt;p&gt;The problem is that tagging every task in &lt;code&gt;main.yml&lt;/code&gt; would be
cumbersome, error prone, and clutter the code unnecessarily.&lt;/p&gt;

&lt;p&gt;The best way to tag all your tasks is to include your real task file
from &lt;code&gt;tasks/main.yml&lt;/code&gt; and tag the whole file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;foobar.yml tags=foobar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, I name the real task file &lt;code&gt;foobar.yml&lt;/code&gt; with the same name as the role
(quite handy with &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;locate&lt;/code&gt;; no need to guess which &lt;code&gt;main.yml&lt;/code&gt; you are
looking for) and apply the tag &lt;code&gt;foobar&lt;/code&gt; to all tasks in the role.&lt;/p&gt;

&lt;p&gt;You can repeat this if you have a big list of tasks and want to split
them in several files. You could, for instance, separate configuration
and installation matters, and add another specific tag for each of them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;foobar-install.yml tags=foobar,foobar:install&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;foobar-config.yml tags=foobar,foobar:config&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I added two tags to the installation part (&lt;code&gt;foobar&lt;/code&gt; and
&lt;code&gt;foobar:install&lt;/code&gt;), and two for the configuration part (&lt;code&gt;foobar&lt;/code&gt; and
&lt;code&gt;foobar:config&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;:&lt;/code&gt; between, for instance, &lt;code&gt;foobar&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; has no
meaning. Ansible treats tags as dumb strings. It is just a personnal
convention (Redis like) for refining tags.&lt;/p&gt;

&lt;p&gt;With this setup, you could run only the configuration part of your role
by issuing:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ansible-playbook playbook.yml -t foobar:config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-l&lt;/code&gt; combination is a very powerful weapon to target
a specific host with a precise change (think of this as pointing to a
matrix cell targetting host (i.e. row) and tag (i.e. column)).&lt;/p&gt;

&lt;h3 id=&quot;taskscheckvarsyml&quot;&gt;&lt;code&gt;tasks/check_vars.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I use this file to ensure that required variables are defined.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Checking that required variables are set&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Checking that required variables are set&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;msg=&amp;quot;{{ item }} is not defined&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;not {{ item }}&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;with_items&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;foobar_database&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;foobar_deploy_user&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, include this file in &lt;code&gt;tasks/main.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;check_vars.yml tags=foobar,foobar:check,check&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;foobar.yml tags=foobar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;templates&quot;&gt;&lt;code&gt;templates/*&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is the place where templates (i.e. files with interpolated
variables goes). While this is not necessary, I often reference them
using a relative path like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Template foo&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;../templates/foo.conf.j2&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/some/place/in/the/node/filesystem/foo.conf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The goal of using relative path is to be able to hit &lt;code&gt;gf&lt;/code&gt; in Vim and
open the file directly. You can get rid of that and just use &lt;code&gt;src:
foo.conf.j2&lt;/code&gt;. It is just a readability/convenience tradeoff.&lt;/p&gt;

&lt;p&gt;The file name I use is the &lt;strong&gt;intended filename at the destination&lt;/strong&gt;,
appended with &lt;code&gt;.j2&lt;/code&gt; so it is clear that it is a Jinja2 template, and
easier to search (&lt;code&gt;find&lt;/code&gt; or &lt;code&gt;locate&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Some folks like to replicate the destination hierarchy (e.g. &lt;code&gt;src: etc/sysconfig
/network-scripts/ifcfg-ethx.cfg.j2&lt;/code&gt;). This is a matter of taste, but personaly I
don’t see the point of having those deep hierarchies in the role if the naming is correct.&lt;/p&gt;

&lt;h3 id=&quot;varsmainyml&quot;&gt;&lt;code&gt;vars/main.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It is sometimes difficult to grok the difference between
&lt;code&gt;vars/main.yml&lt;/code&gt; and &lt;code&gt;defaults/main.yml&lt;/code&gt;. After all, they both contain
variable assignements.&lt;/p&gt;

&lt;p&gt;I do not always use a &lt;code&gt;vars/main.yml&lt;/code&gt;, but when I do, I put “constants
like” variables in it. These are variables that are not intended to be
overriden.&lt;/p&gt;

&lt;p&gt;For instance the github repository for a particular piece of code (e.g.
your web application) will certainly go there. However, the version you
want to deploy won’t.&lt;/p&gt;

&lt;p&gt;All in all, it is just a mechanism to take those values out of tasks files
readability and role life cycle.&lt;/p&gt;

&lt;h2 id=&quot;inventories-and-playbook-layout&quot;&gt;Inventories and playbook layout&lt;/h2&gt;

&lt;p&gt;A playbook glues together roles and inventories. Thus playbooks depend on roles
and inventories. But while you have mechanisms to list roles requirements in a
playbook, you don’t have any for inventories.&lt;/p&gt;

&lt;p&gt;Since the playbook can not live without the targeted inventories I include my
inventories in my playbooks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;playbook-foobar/
├── ansible.cfg
├── requirements.yml
├── .imported_roles/
├── inventories
│   ├── development
│   |   ├── group_vars
│   |   │   └── all
│   |   └── hosts
│   ├── integration
│   |   ├── group_vars
│   |   │   └── all
│   |   └── hosts
│   └── production
│       ├── group_vars
│       │   └── all
│       └── hosts    
├── site.yml
└── playbooks
    ├── database.yml
    └── stuff.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;ansiblecfg-importedroles-and-requirementsyml&quot;&gt;&lt;code&gt;ansible.cfg&lt;/code&gt;, &lt;code&gt;.imported_roles/&lt;/code&gt; and &lt;code&gt;requirements.yml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This file controles ansible behaviour. You can have one in &lt;code&gt;/etc/ansible&lt;/code&gt; or as
a personal dotfile (&lt;code&gt;~/.ansible.cfg&lt;/code&gt;). Adding an &lt;code&gt;ansible.cfg&lt;/code&gt; file in the
playbook root will ensure that the required settings for the playbook to run are
really there. The precedence order for Ansible config files is&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ANSIBLE_CONFIG (an environment variable pointing to a file)&lt;/li&gt;
  &lt;li&gt;ansible.cfg (in the current directory)&lt;/li&gt;
  &lt;li&gt;.ansible.cfg (in the home directory)&lt;/li&gt;
  &lt;li&gt;/etc/ansible/ansible.cfg&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ansible will use the first config file found.&lt;/p&gt;

&lt;p&gt;In this config file, I always set at least two options:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span class=&quot;na&quot;&gt;hostfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./inventories/dev&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;roles_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.imported_roles:/some/dev/place/with/roles&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first one (&lt;code&gt;hostfile&lt;/code&gt;) sets which inventory Ansible will use. More
explanations will come below.&lt;/p&gt;

&lt;p&gt;The second one set the path where Ansible will look for roles. I typically set
two directories here (separated by &lt;code&gt;:&lt;/code&gt;, like shell’s &lt;code&gt;PATH&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the first directory will be used by Ansible galaxy hold imported files. I 
set it to &lt;code&gt;.imported_roles&lt;/code&gt; but the name doesn’t matter. Don’t forget to add it to your playbook’s &lt;code&gt;.gitignore&lt;/code&gt; though.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the second directory points to my roles developmenent directory path&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The advantages for this setup are two fold: first, you have a dedicated path,
ignored by your SCM, where you will download roles. The roles will be searched
there first. Secondly, if a role is not found, it will be searched in your role
development directory. This let you hack on your roles while writing a playbook.
You don’t need to go through a &lt;em&gt;commit/push/install&lt;/em&gt; cycle when you are coding
your roles for this playbook.&lt;/p&gt;

&lt;p&gt;Roles dependencies for your playbook are listed in &lt;code&gt;requirements.yml&lt;/code&gt; and can be installed with &lt;code&gt;ansible-galaxy install -r requirements.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Role on galaxy&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;you.rolename&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Public role on github&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;role-public&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;https://github.com/erasme/role-public.git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Private role on github&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;role-private&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;git+ssh://git@github.com/you/role-private.git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;inventories-1&quot;&gt;&lt;code&gt;inventories/&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This directory holds all inventories you want to apply your playbook too. The
most common pattern is to use per-environment inventories: one for
&lt;code&gt;development&lt;/code&gt;, one for &lt;code&gt;integration&lt;/code&gt;, another for &lt;code&gt;production&lt;/code&gt;, etc…&lt;/p&gt;

&lt;p&gt;Of course, the &lt;code&gt;hostfile&lt;/code&gt; variable in &lt;code&gt;ansible.cfg&lt;/code&gt; should point to
&lt;code&gt;development&lt;/code&gt; to avoid accidentaly messing with production. Executing the
playbook on non-development inventories will force you tu use the &lt;code&gt;-i&lt;/code&gt;, which is
a good safety measure.&lt;/p&gt;

&lt;p&gt;While you can define variables in groups (in &lt;code&gt;group_vars&lt;/code&gt;) and hosts (&lt;code&gt;host_vars&lt;/code&gt;), you should stuff as much variables as possible in &lt;code&gt;group_vars/all&lt;/code&gt;. The rationale is that it is much easier to find a variable when a single file is involved. Variables scattered in a dozen of files are &lt;em&gt;not&lt;/em&gt; manageable.&lt;/p&gt;

&lt;p&gt;And when you’ll want to create an additional inventory (e.g. create &lt;code&gt;production&lt;/code&gt;
from &lt;code&gt;development&lt;/code&gt;), it will be much easier to change a single file and set the
variables to proper values than to do the same in several files.&lt;/p&gt;

&lt;p&gt;Note that &lt;code&gt;group_vars/all&lt;/code&gt; can be a directory containing several files. I
usually split variables in a clear text file (&lt;code&gt;group_vars/all/all&lt;/code&gt;) and a
ciphered one (&lt;code&gt;group_vars/all_secret&lt;/code&gt;) using the transparent vaulting techniques
described in&lt;br /&gt;
&lt;a href=&quot;/articles/transparent-vault-revisited/&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;siteyml-and-playbooks&quot;&gt;&lt;code&gt;site.yml&lt;/code&gt; and &lt;code&gt;playbooks/&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This directory contains the playbookks themselves. I always create a “master” playbook called &lt;code&gt;site.yml&lt;/code&gt; in the playbook root directory, which includes all other playbooks located in &lt;code&gt;playbooks/&lt;/code&gt;. For instance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ansible-playbook&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;playbooks/database.yml&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;playbooks/stuff.yml&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The rationale is to be able to use &lt;code&gt;ansible-pull&lt;/code&gt; easily if needed (&lt;code&gt;ansible-
pull&lt;/code&gt;, by default, tries to execute a playbook called&lt;code&gt;site.yml&lt;/code&gt;). The other
point is to split playbook in related parts.&lt;/p&gt;

&lt;p&gt;For instance, you could have a playbook the takes care of setting up the
database, another that will set the OS level stuff (e.g. ssh keys, firewalling,
…), another one that takes care of deploying your web application, etc… When
needed, You can use all the playbooks at once with &lt;code&gt;site.yml&lt;/code&gt;, or just focus on
a specific problem running the appropriate playbook (no need to run the ssh-key
setup if you’re just deploying the latest version of your web application).&lt;/p&gt;

&lt;p&gt;The shebang line at the top of the file (&lt;code&gt;#!/usr/bin/env ansible-playbook&lt;/code&gt;) will
make the playbook directly executable (adjust &lt;code&gt;ansible-playbook&lt;/code&gt; path and &lt;code&gt;chmod
+x&lt;/code&gt; the playbook file).&lt;/p&gt;

&lt;h2 id=&quot;layout-antipatterns&quot;&gt;Layout Antipatterns&lt;/h2&gt;

&lt;p&gt;When I started using Ansible, I cumulated several antipatterns at the
same time: trying to emcompass all my infrastructure in a single
inventory containing per-host fine grained variables, used in a single
playbook, without using any role.&lt;/p&gt;

&lt;p&gt;While this sounds feasible, it is doomed to failure unless you manage a
very small infrastructure. Let’s zoom in briefly on each mistake.&lt;/p&gt;

&lt;h3 id=&quot;trying-to-encompass-all-your-infrastructure-in-one-playbook&quot;&gt;Trying to encompass all your infrastructure in one playbook&lt;/h3&gt;

&lt;p&gt;Is is tempting to aim for a one-liner that will magically deploy all
your infrastructure in one shot. This gives you some bragging rights at
your next meetup, and feels like the ultimate sysadmin masterpiece.&lt;/p&gt;

&lt;p&gt;However, it has many drawbacks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;it will be slow: do you really want to run a playbook over dozens of
more tasks or roles, just to change an entry in &lt;code&gt;/etc/hosts&lt;/code&gt; ? Yes,
there are workaround for this, but it will require some command line
magic, a lot of thinking. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it mixes bananas and apples: you should strive for separation of
concerns in your playbooks if you want be able to read them (and, as a
consequence, maintain them).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a consequence, your infrastructure code will be unnecessary hard to
test and maintain.&lt;/p&gt;

&lt;h3 id=&quot;per-host-fine-grained-variables&quot;&gt;Per-host fine grained variables&lt;/h3&gt;

&lt;p&gt;This is a corolary of the previous antipattern: when you try to
encompass your whole infrastructure, you start to think, inheritance,
variables overriding and refining.&lt;/p&gt;

&lt;p&gt;And while doing this, you add considerable complexity to your
inventories. It is very hard to track down variables definitions when
you overrides them in &lt;code&gt;group_vars/some_group&lt;/code&gt;, &lt;code&gt;group_vars/all&lt;/code&gt;,
&lt;code&gt;hosts_vars/machine&lt;/code&gt;, role defaults, …&lt;/p&gt;

&lt;p&gt;Now this can get even worse when you use the &lt;code&gt;hash_behavior: merge&lt;/code&gt;
Ansible configuration setting: it introduces more confusion, and makes
your Ansible work potentially unshareable with people using
&lt;code&gt;hash_behaviour: replace&lt;/code&gt;. Since I am
&lt;a href=&quot;https://github.com/ansible/ansible/commit/e28e538c6ed7520ecef305c776eb6036aff42d06&quot;&gt;guilty&lt;/a&gt;
on this one, it is time to make some apologies. Sorry folks. Michael
DeHaan did not like it, and he was right.&lt;/p&gt;

&lt;h3 id=&quot;single-playbook&quot;&gt;Single playbook&lt;/h3&gt;

&lt;p&gt;A single playbook relates to the first Sin again, but also applies to
more focused playbooks where you only deploy one thing. Splitting your
playbooks between various logically related roles will fasten your
deployments. Again, why running ssh key distribution, storage cluster
deployment, web stack, middlewares and application when you just change
the color of a button in your web app ?&lt;/p&gt;

&lt;p&gt;Split your playbook in related parts that reflects your stack
architecture. They will be faster and easier to use.&lt;/p&gt;

&lt;h3 id=&quot;no-roles-tasks-only&quot;&gt;No roles (tasks only)&lt;/h3&gt;

&lt;p&gt;Well, this is obvious. Even if you don’t want to share, make roles and
strive for code reuse. Reused code will save you time of course, but it
is also battle tested since it is used more frequently.&lt;/p&gt;

&lt;p&gt;Tasks-only playbook can be used for a quick hit and run, solving a
transient problem that doesn’t offer any code reuse opportunities.&lt;/p&gt;

&lt;p&gt;I also try to avoid tasks along roles in playbooks: this hurts the
abstraction level you manage to build using roles. When thinking in
terms of roles, you don’t need to think about the nitty gritty details
of the roles when reading your playbooks. If your roles are thouroughly
tested, you can read your infrastructure in seconds. Add tasks to the
mix, and you loose this superpower.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Yes, you could separate your application server (e.g. php-fpm) and put it on a different machine than your webserver, it ll depends on your local context. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;http://docs.ansible.com/intro_configuration.html &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/ansible-files-layout&quot;&gt;Laying out roles, inventories and playbooks&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on July 02, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Decoupling your Ansible roles]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/decoupling-your-ansible-roles" />
  <id>https://leucos.github.io/decoupling-your-ansible-roles</id>
  <published>2015-06-27T00:00:00+02:00</published>
  <updated>2015-06-27T00:00:00+02:00</updated>
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;Having tightly coupled role is the best way to have a hard time
maintaining roles and playbooks, and live in fear of changing anything
in them.&lt;/p&gt;

&lt;p&gt;Here is a journey into role decoupling.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;Let say we have a role (&lt;em&gt;my_app&lt;/em&gt;) that depend on &lt;em&gt;php-fpm&lt;/em&gt; role. In the php-fpm
role, we want to display errors in HTML output depending on the application
running environment (e.g. always display unless we’re running in production
environment).&lt;/p&gt;

&lt;p&gt;The application running environment is available in &lt;code&gt;myapp_environment&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;first-idea&quot;&gt;First idea&lt;/h2&gt;

&lt;p&gt;The first idea that comes to mind is to change the php.ini according to
&lt;code&gt;myapp_environment&lt;/code&gt;, like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jinja&quot; data-lang=&quot;jinja&quot;&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myapp_environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;production&amp;quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;display_errors = Off&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;display_errors = On&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem with this approach if that php-fpm role now needs
&lt;code&gt;myapp_environment&lt;/code&gt; to be defined, which is quite absurd.&lt;/p&gt;

&lt;p&gt;So instead, you could rename the variable &lt;code&gt;environment&lt;/code&gt;, and use this in
both roles (&lt;code&gt;myapp&lt;/code&gt; and &lt;code&gt;php-fpm&lt;/code&gt;). This is better, but not much. The
problem with this approach is that a plain &lt;code&gt;environment&lt;/code&gt; variable is not
linked (by it’s name) to any role, and this can lead to great confusion
is it is used and set in many roles or in different places in the
inventory.&lt;/p&gt;

&lt;h2 id=&quot;another-try&quot;&gt;Another try&lt;/h2&gt;

&lt;p&gt;So the best way is to have two variables, &lt;code&gt;php_fpm_environment&lt;/code&gt; and &lt;code&gt;myapp_environment&lt;/code&gt; which makes is meaningful. But now how can I sync
them together ?&lt;/p&gt;

&lt;p&gt;One ways is to match them in your inventory, like so :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Somewhere in inventory&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp_environment&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;production&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;php_fpm_environment&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myapp_environment&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this has some drawbacks. For instance, we are still talking about
&lt;code&gt;php_fpm_environment&lt;/code&gt; and, while not a big deal, it has no php-fpm
meaning per se and it is not obvious what this variable does.&lt;/p&gt;

&lt;p&gt;Also, in the &lt;code&gt;php.ini&lt;/code&gt; template, we will still have to test against the string
“production” to set &lt;code&gt;display_errors&lt;/code&gt;. Testing against a string set somewhere
else is quite dangerous. What is the production name for the app is “live”
instead ? Our php-fpm role is broken now.&lt;/p&gt;

&lt;h2 id=&quot;some-progress&quot;&gt;Some progress&lt;/h2&gt;

&lt;p&gt;We could go a better way: let’s call the variable &lt;code&gt;php_fpm_display_error&lt;/code&gt; (more
meaningful) and make it a boolean. We now can do this :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jinja&quot; data-lang=&quot;jinja&quot;&gt;&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;php_fpm_display_errors&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;display_errors = On&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;display_errors = Off&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and somewhere in inventory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;myapp_environment&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;production&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;php_fpm_display_errors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myapp_environment&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;streamlining-our-solution&quot;&gt;Streamlining our solution&lt;/h2&gt;

&lt;p&gt;Well, this is better now. But it is not perfect. The inventory is more verbose
than required and handles something that it shouldn’t have to take care
of. It is also quite easy to forget to add it to the inventory and end up
with errors showing in production.&lt;/p&gt;

&lt;p&gt;By moving this logic away from the inventory, and directly in the role
dependencies, this configuration setting becomes completely transparent, and we get rid of redundancy. We just have to add the following lines in &lt;code&gt;myapp/meta/main.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;role-php-fpm&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;php_fpm_display_errors&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;myapp_environment&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, php-fpm role is completely decoupled from myapp role, and the production
setting is completely transparent to the role user. Setting &lt;code&gt;myapp_environment&lt;/code&gt;
is enough to have the depending role set variables accordingly. You don’t even
have to be aware of the &lt;code&gt;myapp&lt;/code&gt; role dependency. If you swap, let say
nginx/php-fpm for apache/php, you just have to change the role dependency and
have no impact on your inventory. If you want to name your production
environment “live”, you can do so by changing &lt;code&gt;meta/main.yml&lt;/code&gt; and not
touching anything else.&lt;/p&gt;

&lt;p&gt;Keeping role decoupled is the best way to have manageable and reusable
roles. Try to make them self sufficient, and avoid cross variables or
even worse, group names in roles !&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/decoupling-your-ansible-roles&quot;&gt;Decoupling your Ansible roles&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on June 27, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Transparent encryption with ansible vault revisited]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/articles/transparent-vault-revisited/" />
  <id>https://leucos.github.io/articles/transparent-vault-revisited</id>
  <updated>2015-05-25T00:00:00-00:00</updated>
  <published>2015-05-26T00:00:00+02:00</published>
  
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;doing-it-the-wrong-way&quot;&gt;Doing it the wrong way&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/articles/ansible-transparent-vault/&quot;&gt;Last attempt&lt;/a&gt;
to make ansible vault encryption/decryption transparent wasn’t quite
right. Decrypting files after commit wasn’t a good idea as
&lt;a href=&quot;https://github.com/ralovely&quot;&gt;Raphael Campardou&lt;/a&gt; noticed.&lt;/p&gt;

&lt;p&gt;In search for a better idea, I eventually realized that hooks where not
the right place to do it: yes, you can guard from commiting files that
should be encrypted, but hacking around hooks to build a crypt/decrypt
pipeline is doomed to failure.&lt;/p&gt;

&lt;h2 id=&quot;doing-it-better&quot;&gt;Doing it better&lt;/h2&gt;

&lt;p&gt;While looking for alternate ways, I remembered I hacked around with
git filters back in the days to see clear-text diffs for OpenOffice
files.&lt;/p&gt;

&lt;p&gt;Git let’s you apply &lt;code&gt;smudge&lt;/code&gt;, &lt;code&gt;clean&lt;/code&gt; and &lt;code&gt;textconv&lt;/code&gt; filters to files
which are applied this way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;filter/smudge: after checkout, reads blob from STDIN and outputs the
workfile from STDOUT&lt;/li&gt;
  &lt;li&gt;filter/clean: converts the worktree file to blob upon check in&lt;/li&gt;
  &lt;li&gt;diff/textconv: applied before diffing files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, for our needs, &lt;em&gt;smudge&lt;/em&gt; and &lt;em&gt;textconv&lt;/em&gt; are good places to decrypt,
while &lt;em&gt;clean&lt;/em&gt; is the place to encrypt.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The implementation requires to write the 3 filters (&lt;em&gt;smudge&lt;/em&gt;, &lt;em&gt;clean&lt;/em&gt;,
&lt;em&gt;textconv&lt;/em&gt;) and configure your git repos to use the filters.&lt;/p&gt;

&lt;p&gt;Those filters should be executable.&lt;/p&gt;

&lt;p&gt;As we did in last post, we will use a &lt;code&gt;.vault_password&lt;/code&gt; file in the
project root directory containing the vault key (don’t forget to add it
to your &lt;code&gt;.gitignore&lt;/code&gt; file !). The filters fail if the file is not
present.&lt;/p&gt;

&lt;h3 id=&quot;smudge&quot;&gt;Smudge&lt;/h3&gt;

&lt;p&gt;The problem that came up to write the smudge &amp;amp; clean filters is that the
blob content is fed on STDIN, and &lt;code&gt;ansible-vault&lt;/code&gt; can only
encrypt/decrypt files &lt;em&gt;in-place&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So we have to write the blob in a temporary file. While this is not
really a problem for the smudge filter, it is for the clean filter since
the temporary file contains the clear-text version of the file. The temp
file is created with restricted permissions, but you’ve been warned.&lt;/p&gt;

&lt;p&gt;Smudge’s filter job is simple:
- write STDIN content to temp file
- decrypt the temp file and swallow the output in a variable (using
  &lt;code&gt;ansible-vault view&lt;/code&gt; after setting the PAGER to &lt;code&gt;cat&lt;/code&gt;)
- if the file was a vault encrypted file, display the variable, else,
  bail out.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -r &lt;span class=&quot;s1&quot;&gt;&amp;#39;.vault_password&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;mktemp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
cat &amp;gt; &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ansible-vault view &lt;span class=&quot;s2&quot;&gt;&amp;quot;$tmp&amp;quot;&lt;/span&gt; --vault-password-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.vault_password 2&amp;gt; /dev/null&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTENT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;ERROR: data is not encrypted&amp;#39;&lt;/span&gt; &amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Looks like one file was commited clear text&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Please fix this before continuing !&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONTENT&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

rm &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you guessed, &lt;code&gt;ansible-vault&lt;/code&gt; does not output errors on STDERR but on
STDOUT.&lt;/p&gt;

&lt;h3 id=&quot;clean&quot;&gt;Clean&lt;/h3&gt;

&lt;p&gt;The clean filter works almost the same way:
- write STDIN to a temp file
- encrypt the temp file in place
- write the temp file to STDOUT&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -r &lt;span class=&quot;s1&quot;&gt;&amp;#39;.vault_password&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;mktemp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
cat &amp;gt; &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;

ansible-vault encrypt &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt; --vault-password-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.vault_password &amp;gt; /dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;1

cat &lt;span class=&quot;s2&quot;&gt;&amp;quot;$tmp&amp;quot;&lt;/span&gt;
rm &lt;span class=&quot;nv&quot;&gt;$tmp&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This one was quite easy. We could also use modelines, by encrypting only if
“vault: true” is present in the 4 first lines. This way, we could apply
the filters to all the files. However I ditched the idea for performance
reasons (see below).&lt;/p&gt;

&lt;h3 id=&quot;diff-filter&quot;&gt;Diff filter&lt;/h3&gt;

&lt;p&gt;The filter works like the smudge filter except that it uses the file
name passed as a parameter.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -r &lt;span class=&quot;s1&quot;&gt;&amp;#39;.vault_password&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PAGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CONTENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ansible-vault view &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; --vault-password-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.vault_password 2&amp;gt; /dev/null&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$CONTENT&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s1&quot;&gt;&amp;#39;ERROR: data is not encrypted&amp;#39;&lt;/span&gt; &amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  cat &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$CONTENT&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-configuration&quot;&gt;Git configuration&lt;/h3&gt;

&lt;h4 id=&quot;attributes&quot;&gt;Attributes&lt;/h4&gt;

&lt;p&gt;Now that the various filters are out and chmoded +x, we need to set-up
out git repos to use them.&lt;/p&gt;

&lt;p&gt;For this, we need to tell git on which files we want to apply the
filters, using a &lt;code&gt;.gitattributes&lt;/code&gt; file in our project top directory.&lt;/p&gt;

&lt;p&gt;The following &lt;code&gt;.gitattributes&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;*_vault* filter=vault diff=vault&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will run filters on repository blobs/files that match &lt;code&gt;*_vault*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I initially intended to run the filters on all files, using modelines.
However, performance was really bad, so I finally ended up removing a
full wildcard (&lt;code&gt;*&lt;/code&gt;) and restrict filter selection to specific files.
You can repeat the lines ad nauseam if you want to catch multiple
fileglobs.&lt;/p&gt;

&lt;h4 id=&quot;gitconfig&quot;&gt;Gitconfig&lt;/h4&gt;

&lt;p&gt;I put my filters in &lt;code&gt;~/.bin/&lt;/code&gt;, but the location doesn’t matter. You can
event add them to the project and commit them, so everyone has them.&lt;/p&gt;

&lt;p&gt;The following section needs to be added to the project’s &lt;code&gt;.git/config&lt;/code&gt;
file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[filter &amp;quot;vault&amp;quot;]
  smudge = ~/.bin/smudge_vault
  clean  = ~/.bin/clean_vault

[diff &amp;quot;vault&amp;quot;]
  textconv = ~/.bin/diff_vault&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;test&quot;&gt;Test&lt;/h3&gt;

&lt;p&gt;Adding a file that matches a glob in &lt;code&gt;.gitattributes&lt;/code&gt; should now trigger
transparent encryption.&lt;/p&gt;

&lt;p&gt;Here is a sample transcript.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/7oaviuh8v2pi39zeojxrn8434.js&quot; id=&quot;asciicast-7oaviuh8v2pi39zeojxrn8434&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;big-fat-warning&quot;&gt;Big fat warning&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;git cat-file&lt;/code&gt; part is not here for decoration. At least the first
time, ensure that encryption works.&lt;/p&gt;

&lt;h3 id=&quot;the-filters&quot;&gt;The filters&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/leucos/1bfcfc7252e8c262956e.js&quot;&gt; &lt;/script&gt;


    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/articles/transparent-vault-revisited/&quot;&gt;Transparent encryption with ansible vault revisited&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on May 26, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Transparent encryption/decryption with ansible vault]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/articles/ansible-transparent-vault/" />
  <id>https://leucos.github.io/articles/ansible-transparent-vault</id>
  <updated>2015-05-25T00:00:00-00:00</updated>
  <published>2015-05-25T00:00:00+02:00</published>
  
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;big-fat-warning&quot;&gt;Big Fat Warning&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;THIS FILE IS LEFT HERE FOR REFERENCE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, the method described here is WRONG. Check out 
&lt;a href=&quot;/articles/transparent-vault-revisited/&quot;&gt;next post&lt;/a&gt; instead !&lt;/p&gt;

&lt;h2 id=&quot;pain-points&quot;&gt;Pain points&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ansible-vault&lt;/code&gt; is handy. You can crypt your stuff before commiting it so your
private stuff (AWS/DigitalOcean/… keys, passwords, …) don’t end up
world-readable on GitHub.&lt;/p&gt;

&lt;p&gt;However, it is too easy to decrypt your stuff, forget about it, and commit it 
without encrypting it back. It is also quite tedious to ansible-vault
encrypt/decrypt all day long.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ralovely&quot;&gt;Raphael Campardou&lt;/a&gt; proposed a &lt;a href=&quot;https://gist.github.com/ralovely/9367737&quot;&gt;nice
solution&lt;/a&gt; to prevent commiting
ansible vault files.&lt;/p&gt;

&lt;p&gt;In his solution, you have to name your files &lt;code&gt;*_vault.yml&lt;/code&gt; so they get busted
by a pre-commit hook if they are not currently encrypted.&lt;/p&gt;

&lt;p&gt;This is nice: by naming your files appropriately, you can not commit them unless
they are ansible-vault crypted beforehand.&lt;/p&gt;

&lt;p&gt;I extended his idea so it can apply to any file in an Ansible repository, with
very little configuration, and added a post-commit hook so files gets
transparently decrypted after being commited.&lt;/p&gt;

&lt;h2 id=&quot;transparent-encryptiondecryption&quot;&gt;Transparent encryption/decryption&lt;/h2&gt;

&lt;p&gt;The goal is simple: automagically encrypt the proper files before commit,
commit them, then decrypt them afterwards so we can hack again without
any manual intervention. All this with minimal configuration.&lt;/p&gt;

&lt;h3 id=&quot;marking-file-for-encryption&quot;&gt;Marking file for encryption&lt;/h3&gt;

&lt;p&gt;The center trick is to find a way to mark a file for encryption. Modelines
(a.k.a. emacs local variable lines) to the rescue.&lt;/p&gt;

&lt;p&gt;To tell git hooks that a file requires encryption, we’ll add this line to
the top of the file (or on line 2 if the file already has a shebang
line) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# -*- vault: true; -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any file having &lt;code&gt;vault: true&lt;/code&gt; in a modeline is set to &lt;strong&gt;require encryption before
commit&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The icing on the cake is that you can use this modeline to set the filetype
too[1], and help your editor to find out the proper file content, which is
quite handy with some files not ending in &lt;code&gt;yml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# -*- mode: yaml; vault: true; -*-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is supported out of the box by vim and Emacs. If you use SublimeText,
you can use the &lt;a href=&quot;https://github.com/kvs/STEmacsModelines&quot;&gt;STEmacsModelines&lt;/a&gt;
package.&lt;/p&gt;

&lt;h3 id=&quot;using-the-hooks&quot;&gt;Using the hooks&lt;/h3&gt;

&lt;p&gt;The pre-commit hook will encrypt files marked with &lt;code&gt;vault: true&lt;/code&gt;. If a
&lt;code&gt;.vault_password_hooks&lt;/code&gt; file is present in the project root directory, it will be
used as the password.&lt;/p&gt;

&lt;p&gt;If this file doesn’t exist, you’ll be promted for an encryption password and
this password will be saved in &lt;code&gt;.vault_password_hooks&lt;/code&gt;, in your project’s root.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;.vault_password_hooks&lt;/code&gt; is listed in &lt;code&gt;.gitignore&lt;/code&gt;, this file will persist and you
won’t be asked for a password anymore for encryption as well as for decryption.
Otherwise, &lt;code&gt;.vault_password_hooks&lt;/code&gt; will be erased after encryption to avoid commiting
the file.&lt;/p&gt;

&lt;p&gt;After commiting the files, the post-commit hook will use the same password to
decrypt the previously encrypted files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; add &lt;code&gt;.vault_password_hooks&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt;, add &lt;code&gt;# -*-
vault: true; -*-&lt;/code&gt; to files that requires encryption and you’re set.&lt;/p&gt;

&lt;p&gt;You end up with a workflow where your files are transparently encrypted before
commit and decrypted after.&lt;/p&gt;

&lt;h2 id=&quot;hooks&quot;&gt;Hooks&lt;/h2&gt;

&lt;p&gt;Put the hooks in &lt;code&gt;.git/hooks/&lt;/code&gt; and don’t forget to &lt;code&gt;chmod +x
{pre,post}-commit&lt;/code&gt; them.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/leucos/405b406b9d6bde0c3d39.js&quot;&gt; &lt;/script&gt;


    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/articles/ansible-transparent-vault/&quot;&gt;Transparent encryption/decryption with ansible vault&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on May 25, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Making dynamic inventory usable with Ansible and Digital Ocean]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/articles/ansible-contract-inventory/" />
  <id>https://leucos.github.io/articles/ansible-contract-inventory</id>
  <updated>2015-05-11T00:00:00-00:00</updated>
  <published>2015-05-03T00:00:00+02:00</published>
  
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;You’ve been there too. Spinning up droplets on DigitalOcean with Ansible
and using a dynamic inventory script is quite a pain.&lt;/p&gt;

&lt;p&gt;Most approaches use the &lt;code&gt;digital_ocean&lt;/code&gt; ansible module in
playbooks to spin up droplets, along with the &lt;code&gt;digital_ocean.py&lt;/code&gt; dynamic
inventory script, using this kind of workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;define your droplets in a YAML file (eventually with size, region,
etc…)&lt;/li&gt;
  &lt;li&gt;create a playbook that will loop over droplet list (&lt;code&gt;with_items&lt;/code&gt; or
equivalent) and spin up the droplet&lt;/li&gt;
  &lt;li&gt;dynamically add started droplets to inventory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach has many drawbacks, and, to be honest, is not really usable.&lt;/p&gt;

&lt;h3 id=&quot;slooooooow&quot;&gt;Slooooooow&lt;/h3&gt;

&lt;p&gt;First, it is damn slow. Droplet creation is serialized. Since
&lt;code&gt;digital_ocean&lt;/code&gt; waits for the droplet to come up, and since DO itself
advertizes ‘Start your droplet in 55 seconds !’, you can do the math.
Starting a single droplet is quite long, so spinning up your multi-tier,
fault-tolerant, distributed architecture will take ages.&lt;/p&gt;

&lt;p&gt;You probably can use &lt;code&gt;async&lt;/code&gt; + &lt;code&gt;poll&lt;/code&gt; to spin up the droplets. I didn’t
try and don’t know where this would lead. But you’d still face the other
issues.&lt;/p&gt;

&lt;h3 id=&quot;naming&quot;&gt;Naming&lt;/h3&gt;

&lt;p&gt;You droplets won’t have real names. They will be known by their IPs.
Sure, if you use the &lt;code&gt;name&lt;/code&gt; parameter during creation, you might be able
to use it, but at best, this will be a group name.&lt;/p&gt;

&lt;p&gt;You could also use &lt;code&gt;add_host&lt;/code&gt; in your bootstrapping script, but this is
a run time hack, so forget about setting variables in &lt;code&gt;host_vars&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since droplets are mostly nameless, grouping them is hard. Sure, you can
do it at run time with &lt;code&gt;add_host&lt;/code&gt; too, but you won’t leverage
&lt;code&gt;group_vars&lt;/code&gt; usage.&lt;/p&gt;

&lt;p&gt;Anyway, all those run-time naming hacks will force you to loop over all
your droplets definitions, hit DO API to make sure they’re alive, then
loop over API responses to add hosts and groups EVERY time you execute a
playbook.&lt;/p&gt;

&lt;h3 id=&quot;localhost-is-forced-in&quot;&gt;localhost is forced in&lt;/h3&gt;

&lt;p&gt;Spinning up instances on DO will require to run the &lt;code&gt;digital_ocean&lt;/code&gt;
module as a &lt;code&gt;local_action&lt;/code&gt; or using &lt;code&gt;delegate_to: localhost&lt;/code&gt;. This means
that you are bound to declare localhost in your inventory. This is a
real pain, since it makes the &lt;code&gt;all&lt;/code&gt; group mostly unusable, unless you
change all your playbook hosts definitions from &lt;code&gt;hosts: all&lt;/code&gt; to &lt;code&gt;hosts:
all:!localhost&lt;/code&gt;. Pretty bad for readability.&lt;/p&gt;

&lt;p&gt;Let’s stop here, there are already enough reasons to find an alternate
way. There are probably other cons, and certainly pros too for the
dynamic approach, but I fell that this way of doing it is barely usable
for serious, repeatable stuff.&lt;/p&gt;

&lt;h2 id=&quot;alternate-aproach&quot;&gt;Alternate aproach&lt;/h2&gt;

&lt;p&gt;In the end, we would like to work as we do with on-prem hardware: have a
static inventory.&lt;/p&gt;

&lt;p&gt;The idea is to create this static inventory first, and then use a
bootstrapping script that will use this inventory as a contract to apply
on DigitalOcean.&lt;/p&gt;

&lt;p&gt;The script will list all hosts in your inventory (using &lt;code&gt;ansible
--list-hosts&lt;/code&gt;), and parallelize droplet creation on digital ocean.&lt;/p&gt;

&lt;p&gt;When all droplets are created, it will create a complementary inventory
file in your inventory directory containing hosts with their respective
IPs.&lt;/p&gt;

&lt;p&gt;At this point, you have a perfectly static inventory, and can run your
ansible playbook normally, without hitting external APIs (serialized),
without naming problems, … Things are just &lt;em&gt;normal&lt;/em&gt;, fast and
reliable, without edge cases introduced by dynamic inventories.&lt;/p&gt;

&lt;p&gt;Using this approach on a 8 droplets setup, the time to set-up instances
went from 9’33” down to 1’56”. And the time to destroy instances went
from 0’55” down to 0’3” (see demo below). Of course, more droplets, 
more gain.&lt;/p&gt;

&lt;p&gt;And these are just create/destroy gains. You also benefit from static
inventory for all your lifecycle playbook runs, since you never hit DO API and
don’t have to build inventory at run time, which is always slower despite the
inventory cache.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Assuming you have an inventory directory in &lt;code&gt;inventories/devel/&lt;/code&gt;,
containing a &lt;code&gt;hosts&lt;/code&gt; file, you can spin up your droplets like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;do_boot.sh inventories/devel/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you’re finished with your infrastructure, call the same command with
the &lt;code&gt;deleted&lt;/code&gt; parameter:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;do_boot.sh inventories/devel/ deleted&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all.&lt;/p&gt;

&lt;p&gt;The script has defaults regarding droplet size, region, image and ssh
key. You can change the defaults in the script to something that suits you, and
override these defaults per droplet in your inventory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;www1&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;www2&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;www3 do_region=2&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;[database]&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;db1 do_size=62 do_image=12345&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;[redis]&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;redis1&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;[elastic]&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;elastic1 do_size=60&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;spinning-up-and-down-8-droplets-in-215&quot;&gt;Spinning up and down 8 droplets in 2’15”&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/19479.js&quot; id=&quot;asciicast-19479&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;script&quot;&gt;Script&lt;/h2&gt;

&lt;p&gt;You can grab the script in this &lt;a href=&quot;https://gist.github.com/leucos/6f8d93de3493431acd29&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; if you run Ansible v2.0+, use &lt;a href=&quot;https://gist.github.com/leucos/2c361f7d4767f8aea6dd&quot;&gt;this script
instead&lt;/a&gt;. It will
use the new digital Ocean API (v2.0 too). You just need to set
&lt;code&gt;DO_API_TOKEN&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Change defaults below&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ---------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Digital Ocean default values&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You can override them using do_something in your inventory file&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Example:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [www]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# www1 do_size=62 do_image=12345&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If you don&amp;#39;t override in your inventory, the defaults below will apply&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULT_SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;66&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# 512mb (override with do_size)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULT_REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# ams2 (override with do_region)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULT_IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;9801950&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Ubuntu 14.04 x64 (override with do_image)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULT_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;785648&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# SSH key, change this ! (override with do_key)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# localhost entry for temporary inventory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is a temp inventory generated to start the DO droplets&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You might want to change ansible_python_interpreter&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOCALHOST_ENTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;localhost ansible_python_interpreter=/usr/bin/python2&amp;quot;&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# Set state to present by default&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;present&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# digital_ocean module command to use&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# name, size, region, image and key will be filled automatically&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;COMMAND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;state=$STATE command=droplet private_networking=yes unique_name=yes&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ---------------------&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; bail_out &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;Usage: $0 &amp;lt;inventory_directory&amp;gt; [present|deleted]\n&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\tinventory_directory: the directory containing the inventory goal (compulsory)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\tpresent: the droplet will be created if it doesn&amp;#39;t exist (default)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;\tdeleted: the droplet will be destroyed if it exists&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Check that inventory is a directory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We need this since we generate a complementary inventory with IP addresses for hosts&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;INVENTORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;$INVENTORY&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bail_out &lt;span class=&quot;s2&quot;&gt;&amp;quot;Inventory does not exist, is not a&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;directory, or is not set&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! -e &lt;span class=&quot;nv&quot;&gt;$DO_CLIENT_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; bail_out &lt;span class=&quot;s2&quot;&gt;&amp;quot;DO_CLIENT_ID not set&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! -e &lt;span class=&quot;nv&quot;&gt;$DO_API_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; bail_out &lt;span class=&quot;s2&quot;&gt;&amp;quot;DO_API_KEY not set&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get a list of hosts from inventory dir&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HOSTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ansible -i &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; --list-hosts all &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{ print $1 }&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tr &lt;span class=&quot;s1&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Clean up previously generated inventory&lt;/span&gt;
rm &lt;span class=&quot;nv&quot;&gt;$INVENTORY&lt;/span&gt;/generated

&lt;span class=&quot;c&quot;&gt;# Creating temporary inventory with only localhost in it&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TEMP_INVENTORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;mktemp&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Creating temporary inventory in &lt;span class=&quot;nv&quot;&gt;$TEMP_INVENTORY&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOCALHOST&lt;/span&gt; &amp;gt; &lt;span class=&quot;nv&quot;&gt;$TEMP_INVENTORY&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create droplets in //&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in &lt;span class=&quot;nv&quot;&gt;$HOSTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;nv&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;grep &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/hosts &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep do_size &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/.*do_size=\(\d*\)/\1/&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;grep &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/hosts &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep do_region &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/.*do_region=\(\d*\)/\1/&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;grep &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/hosts &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep do_image &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/.*do_image=\(\d*\)/\1/&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;grep &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;/hosts &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep do_key &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/.*do_key=\(\d*\)/\1/&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULT_SIZE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REGION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULT_REGION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULT_IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULT_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${STATE}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;present&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Creating $i of size $SIZE using image $IMAGE in region $REGION with key $KEY&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Deleting $i&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# echo &amp;quot; =&amp;gt; $COMMAND name=$i size_id=$SIZE image_id=$IMAGE region_id=$REGION ssh_key_ids=$KEY&amp;quot;&lt;/span&gt;
  ansible localhost -c &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; -i &lt;span class=&quot;nv&quot;&gt;$TEMP_INVENTORY&lt;/span&gt; -m digital_ocean &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;$COMMAND name=$i size_id=$SIZE image_id=$IMAGE region_id=$REGION ssh_key_ids=$KEY&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Now do it again to fill up complementary inventory&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${STATE}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;present&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; i in &lt;span class=&quot;nv&quot;&gt;$HOSTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;Checking droplet &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ansible localhost -c &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; -i &lt;span class=&quot;nv&quot;&gt;$TEMP_INVENTORY&lt;/span&gt; -m digital_ocean -a &lt;span class=&quot;s2&quot;&gt;&amp;quot;state=present command=droplet unique_name=yes name=$i&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep &lt;span class=&quot;s2&quot;&gt;&amp;quot;\&amp;quot;ip_address&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -f2 -d&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$i ansible_ssh_host=$IP&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$INVENTORY&lt;/span&gt;/generated
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;All done !&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/articles/ansible-contract-inventory/&quot;&gt;Making dynamic inventory usable with Ansible and Digital Ocean&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on May 03, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Testing Ansible roles, part 2]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/articles/testing-ansible-roles-part-2/" />
  <id>https://leucos.github.io/articles/testing-ansible-roles-part-2</id>
  <published>2015-03-15T00:00:00+01:00</published>
  <updated>2015-03-15T00:00:00+01:00</updated>
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;Now that we have created our basic role in &lt;a href=&quot;/articles/testing-ansible-roles-part-1/&quot;&gt;part 1&lt;/a&gt;, we need to set-up a Vagrant machine and some tooling to run our tests.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-vagrant-machine&quot;&gt;Creating the Vagrant machine&lt;/h2&gt;

&lt;h3 id=&quot;vagrantfile&quot;&gt;Vagrantfile&lt;/h3&gt;

&lt;p&gt;To spin up a Vagrant machine, we need to create a &lt;code&gt;Vagrantfile&lt;/code&gt;. We’ll create it in our role top directory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ubuntu/trusty64&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;vagrant_specs.sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:upload_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/vagrant/specs&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# change role name below&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;--install ansible-nginx&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can change &lt;code&gt;config.vm.box&lt;/code&gt; to another Vagrant box that better suits your
needs, but keep in mind RoleSpec is very Debian/Ubuntu inclined. We’ll provision
this machine with a shell script (not with Ansible, so we don’t end up in an
inception style situation).&lt;/p&gt;

&lt;h3 id=&quot;provisionning-script&quot;&gt;Provisionning script&lt;/h3&gt;

&lt;p&gt;The provisionning script, &lt;code&gt;vagrant_specs.sh&lt;/code&gt; serves two purposes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;it takes care of installing RoleSpec and setting up the test directory when
called with &lt;code&gt;--install&lt;/code&gt;. This happens only at vagrant provisionning time (e.g.
&lt;code&gt;vagrant up&lt;/code&gt; of &lt;code&gt;vagrant provision&lt;/code&gt;)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it can be called to run the test suite; to make invocation easier, it will copy itself to &lt;code&gt;/usr/local/bin/specs&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Create the &lt;code&gt;vagrant_specs.sh&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Vagrant provisionning script&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Usage for provisionning VM &amp;amp; running (in Vagrant file):&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# script.sh --install &amp;lt;role&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# e.g. : &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# script.sh --install ansible-nginx&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Usage for running only (from host):&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# vagrant ssh -c specs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;x$1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;x--install&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  mv ~vagrant/specs /usr/local/bin/specs
  chmod &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt; /usr/local/bin/specs
  sudo apt-get install -qqy git
  su vagrant -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;git clone --depth 1 https://github.com/nickjj/rolespec&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~vagrant/rolespec &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
  su vagrant -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;rolespec -i ~/testdir&amp;#39;&lt;/span&gt;
  su vagrant -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;ln -s /vagrant/ ~/testdir/roles/$2&amp;quot;&lt;/span&gt;
  su vagrant -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;ln -s /vagrant/tests/$2/ ~/testdir/tests/&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~vagrant/testdir &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rolespec -r &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ls roles&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$*&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and make it executable (&lt;code&gt;chmod +x vagrant_specs.sh&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;running-the-vagrat-box&quot;&gt;Running the Vagrat box&lt;/h3&gt;

&lt;p&gt;Now, let’s check this ! It might take a while if you don’t already have the
vagrant image on your box:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
Bringing machine &#39;nginx&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; nginx: Importing base box &#39;ubuntu/trusty64&#39;...
==&amp;gt; nginx: Matching MAC address for NAT networking...
==&amp;gt; nginx: Checking if box &#39;ubuntu/trusty64&#39; is up to date...
==&amp;gt; nginx: Setting the name of the VM: ansible-nginx_nginx_1426331325901_88232
...
==&amp;gt; nginx: Cloning into &#39;rolespec&#39;...
==&amp;gt; nginx: Installing RoleSpec scripts in /usr/local/bin ...
==&amp;gt; nginx: Installing RoleSpec libs in /usr/local/lib/rolespec ...
==&amp;gt; nginx: Initialized new RoleSpec directory in /home/vagrant/testdir
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;creating-tests&quot;&gt;Creating tests&lt;/h2&gt;

&lt;p&gt;We’re almost done. Only two files left to create. First, we RoleSpec needs an inventory. Nothing fancy here, we just need to create an inventory file with a single host, &lt;code&gt;placeholder_fqdn&lt;/code&gt;, RoleSpec will take care of the rest:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;placeholder_fqdn&amp;quot;&lt;/span&gt; &amp;gt; tests/ansible-nginx/inventory/hosts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;writing-the-test-file&quot;&gt;Writing the test file&lt;/h3&gt;

&lt;p&gt;And finally, we need a test file, where we can check if our playbook works. We can check the syntax, the idempotency, the resulting templates, etc…&lt;/p&gt;

&lt;p&gt;This test file is simply a bash script, in which we include some RoleSpec files to get access to its DSL.&lt;/p&gt;

&lt;p&gt;Let’s start with a simple one, and create &lt;code&gt;tests/ansible-nginx/test&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# -*- bash -*-&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This gives you access to the custom DSL&lt;/span&gt;
. &lt;span class=&quot;s2&quot;&gt;&amp;quot;${ROLESPEC_LIB}/main&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install a specific version of Ansible&lt;/span&gt;
install_ansible &lt;span class=&quot;s2&quot;&gt;&amp;quot;v1.8.3&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Check syntax first, and then that the playbook runs&lt;/span&gt;
assert_playbook_runs

&lt;span class=&quot;c&quot;&gt;# Check that the playbook is idempotent&lt;/span&gt;
assert_playbook_idempotent&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don’t forget to make the test file executable (&lt;code&gt;chmod +x tests/ansible-nginx/test&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;runing-tests&quot;&gt;Runing tests&lt;/h3&gt;

&lt;p&gt;Our simple tests are setup. To run them, we need to execute
&lt;code&gt;/usr/local/bin/specs&lt;/code&gt; in the Vagrant host.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vagrant ssh -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;specs&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;RoleSpecs will then download Ansible (version 1.8.3 since this is what we
asked for), install it, and run our test case.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/17711.js&quot; id=&quot;asciicast-17711&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see in the recording, RoleSpec:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;installs Ansible (&lt;code&gt;ROLESPEC: [Install Ansible - v1.8.3]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;executes the playbook with &lt;code&gt;assert_playbook_runs&lt;/code&gt; (&lt;code&gt;TEST: [Run playbook syntax check]&lt;/code&gt; and &lt;code&gt;TEST: [Run playbook]&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;check that the playbook is idempotent with &lt;code&gt;assert_playbook_idempotent&lt;/code&gt; (&lt;code&gt;TEST: [Re-run playbook]&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pretty neat !&lt;/p&gt;

&lt;h3 id=&quot;runing-tests-faster&quot;&gt;Runing tests faster&lt;/h3&gt;

&lt;p&gt;There is one downside though: it takes almost 3 minutes to run. However, you can
speed up subsequent runs as long as you don’t have to change the Ansible
version: since Ansible is already installed, there is no need to install it
again every time. Using the &lt;code&gt;-p&lt;/code&gt; option will run in &lt;em&gt;playbook mode&lt;/em&gt;, which means
it will only run &lt;code&gt;assert_playbook_runs&lt;/code&gt; test.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vagrant ssh -c &lt;span class=&quot;s1&quot;&gt;&amp;#39;specs&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/17712.js&quot; id=&quot;asciicast-17712&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;25 seconds only, we cut the runtime by six, not bad.&lt;/p&gt;

&lt;h2 id=&quot;local-continuous-integration&quot;&gt;Local continuous integration&lt;/h2&gt;

&lt;p&gt;Now that we have reasonable playbook test run time, we can add local continuous integration to our setup.
We will use &lt;a href=&quot;https://github.com/guard/guard&quot;&gt;Guard&lt;/a&gt; for this.&lt;/p&gt;

&lt;p&gt;Assuming you have a ruby environment setup, just install &lt;code&gt;guard&lt;/code&gt; and &lt;code&gt;guard-shell&lt;/code&gt; gems.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install guard guard-shell --no-ri --no-rdoc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then create a &lt;code&gt;Guardfile&lt;/code&gt; in the roles top directory, with the following content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# -- -*- mode: ruby; -*-&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:shell&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^(?!tests).*/.*\.yml$}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; changed - running tests&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;vagrant ssh -c &amp;quot;specs -p&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This file will ask &lt;code&gt;guard&lt;/code&gt; to execute &lt;code&gt;vagrant ssh -c &quot;specs -p&quot;&lt;/code&gt; everytime it
detects a change in a file ending with &lt;code&gt;.yml&lt;/code&gt; in the project’s subdirectories.
Note that we excluded the &lt;code&gt;tests&lt;/code&gt; directory since it contains somewhere a
&lt;code&gt;test.yml&lt;/code&gt; playbook file generated by RoleSpec at run time. If we don’t exclude
it from the guard watch, the test will loop forever.&lt;/p&gt;

&lt;p&gt;Now run &lt;code&gt;guard&lt;/code&gt;, change a file (.e.g. &lt;code&gt;touch tasks/main.yml&lt;/code&gt;), and see what happens.&lt;/p&gt;

&lt;p&gt;In the next part, we will add some more tests, and see what we can do with &lt;a href=&quot;rolespec&quot;&gt;RoleSpec&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/articles/testing-ansible-roles-part-2/&quot;&gt;Testing Ansible roles, part 2&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on March 15, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Testing Ansible roles, part 1]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/articles/testing-ansible-roles-part-1/" />
  <id>https://leucos.github.io/articles/testing-ansible-roles-part-1</id>
  <published>2015-03-14T00:00:00+01:00</published>
  <updated>2015-03-14T00:00:00+01:00</updated>
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;rolespec&quot;&gt;RoleSpec&lt;/a&gt; does a great job helping out testing your roles. It is
maintained and used primarily to test the &lt;a href=&quot;debops&quot;&gt;DebOps&lt;/a&gt; role suite by the
fine folks hanging out in &lt;a href=&quot;irc://irc.freenode.net/debops&quot;&gt;#debops&lt;/a&gt; IRC channel.
RoleSpec handles all the boiler plate to run tests (installing the right version
of Ansible, adjusting paths, taking care of the inventory, wrapping your role in
a playbook, …) and privides a simple DSL to write tests.&lt;/p&gt;

&lt;p&gt;However, in its current state, RoleSpec is mostly intended to run a test suite
on travis. And this test suite is separated from your role.&lt;/p&gt;

&lt;p&gt;I personally prefer to have my role tests along the Ansible role, in a &lt;code&gt;tests&lt;/code&gt;
directory.&lt;/p&gt;

&lt;p&gt;We see below how we can achieve this with RoleSpec, and will leverage Vagrant
for this. We’ll also use Guard to continuously test our role while writing it.&lt;/p&gt;

&lt;h2 id=&quot;a-simple-role&quot;&gt;A simple role&lt;/h2&gt;

&lt;p&gt;Let’s start by creating a simple nginx role:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir -p ansible-nginx/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;defaults,handlers,tasks,templates,tests/ansible-nginx/inventory&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;tests&lt;/code&gt; directory will be used for our tests later.&lt;/p&gt;

&lt;p&gt;If you already have a role want to convert it, create the &lt;code&gt;tests/ansible-
nginx/&lt;/code&gt; directory and skip straight to 
&lt;a href=&quot;/articles/testing-ansible-roles-part-2/&quot;&gt;part 2&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;defaults&quot;&gt;Defaults&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;default/main.yml&lt;/code&gt;, we’ll declare a few default values for our role. We won’t do much,
in our role, just install nginx and set a few variables, so let’s keep this
simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;nginx_root&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/var/lib/nginx/&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;nginx_worker_connections&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;nginx_ie8_support&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;nginx_port&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;handlers&quot;&gt;Handlers&lt;/h3&gt;

&lt;p&gt;For the handlers part, &lt;code&gt;handlers/main.yml&lt;/code&gt; will contain a basic restart handler, followed by a port check for good measure:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Restart nginx&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;service name=nginx state=restarted&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Check nginx&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Check nginx&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;wait_for&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;port={{ nginx_port }} delay=5 timeout=10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;tasks&quot;&gt;Tasks&lt;/h3&gt;

&lt;p&gt;Now the task part. I always put my tasks in a separate file, and include this
file from &lt;code&gt;main.yml&lt;/code&gt;. This trick will allow you to set a tag for the whole
included file, like so:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;nginx.yml tags=nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then, in &lt;code&gt;nginx.yml&lt;/code&gt;, put the real tasks:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Adds nginx ppa&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;apt_repository&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;repo=ppa:nginx/stable&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Adds PPA key&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;apt_key&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;url=http://keyserver.ubuntu.com:11371/pks/lookup?op=get&amp;amp;search=0x00A6F0A3C300EE8C&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;state=present&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Installs nginx&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pkg=nginx-full&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;state=latest&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Writes nginx.conf&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;src=&amp;quot;../templates/nginx.conf.j2&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;dest=/etc/nginx/nginx.conf&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;validate=&amp;#39;nginx -tc %s&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Restart nginx&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Replaces nginx default server&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;src=&amp;quot;../templates/default.j2&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;dest=/etc/nginx/sites-available/default&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;notify&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Restart nginx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;templates&quot;&gt;Templates&lt;/h3&gt;

&lt;p&gt;We just need to add 2 templates, and our role will be ready. The first one is the main &lt;code&gt;nginx.conf.j2&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jinja&quot; data-lang=&quot;jinja&quot;&gt;&lt;span class=&quot;x&quot;&gt;user www-data;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;worker_processes &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ansible_processor_count&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;pid         /var/run/nginx.pid;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;events {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    worker_connections &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nginx_worker_connections&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    # multi_accept on;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;http {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    # Basic Settings&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    sendfile    on;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    tcp_nopush  on;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    tcp_nodelay on;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    # SSL stuff&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nginx_ie8_support&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ssl_ciphers &amp;quot;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ssl_ciphers &amp;quot;EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXPORT:!PSK:!SRP:!DSS&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    ssl_session_cache shared:SSL:32m;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ssl_buffer_size 8k;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ssl_session_timeout 10m;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    keepalive_timeout     65;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    types_hash_max_size 2048;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    server_tokens off;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    include       /etc/nginx/mime.types;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    default_type  application/octet-stream;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    # Logging Settings&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    access_log /var/log/nginx/access.log;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    error_log /var/log/nginx/error.log;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    # Gzip Settings&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    gzip on;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    gzip_disable &amp;quot;msie6&amp;quot;;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    gzip_comp_level 6;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    gzip_buffers 16 8k;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    gzip_types  application/javascript &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                application/json &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                application/x-javascript &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                application/xml &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                application/xml+rss &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                image/svg+xml&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                text/css &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                text/plain&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                text/xml &lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;                text/javascript;&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    # If HTTPS, then set a variable so it can be passed along.&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    map $scheme $server_https {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        default off;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        https on;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    }&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    # Virtual Host Configs&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    ##&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    include /etc/nginx/conf.d/*.conf;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    include /etc/nginx/sites-enabled/*;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The file is a bit long, but it just contains basic settings. Note that we’re
aligning the number of worker processes to the number of processors reported by
Ansible for the host.&lt;/p&gt;

&lt;p&gt;We are also switching cipher suites depending on whether we want to support IE8
or not.&lt;/p&gt;

&lt;p&gt;Then, we just add a default virtualhost on our server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx_port&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx_root&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.htm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Make site accessible from http://localhost/&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/index.php?q=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$uri&amp;amp;$args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;error_page&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/404.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# redirect server error pages to the static page /50x.html&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;error_page&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;502&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;504&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/50x.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/50x.html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/share/nginx/html/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# deny access to .htaccess files, if Apache&amp;#39;s document root&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# concurs with nginx&amp;#39;s one&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\.ht&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;deny&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our role is now ready. We can now setup the tooling for our tests as explained in &lt;a href=&quot;/articles/testing-ansible-roles-part-2/&quot;&gt;part 2&lt;/a&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/articles/testing-ansible-roles-part-1/&quot;&gt;Testing Ansible roles, part 1&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on March 14, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Invalidating REDIS cache from Ruby]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/articles/expiring-redis-cache-from-ruby/" />
  <id>https://leucos.github.io/articles/expiring-redis-cache-from-ruby</id>
  <updated>2015-03-01T00:00:00-00:00</updated>
  <published>2015-03-01T00:00:00+01:00</published>
  
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;redis-as-padrino-cache&quot;&gt;REDIS as Padrino cache&lt;/h2&gt;

&lt;p&gt;Using REDIS as and application cache is very handy. You can easily use
it in, say, &lt;a href=&quot;http://www.padrinorb.com/&quot;&gt;Padrino&lt;/a&gt; like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyApp&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Padrino&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:caching&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Padrino&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                                    &lt;span class=&quot;ss&quot;&gt;:host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;REDIS_SERVER&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;REDIS_PORT&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;ss&quot;&gt;:db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controllers&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cache_key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;:test:index&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expires&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Some page with expensively computed values&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;test/index&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that we have a specific cache entry for each user
(&lt;code&gt;current_account.email&lt;/code&gt;). For instance, a user with email &lt;code&gt;foo@bar.com&lt;/code&gt;
will have this entry cached at &lt;code&gt;foo@bar.com:test:index&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;cache-invalidation&quot;&gt;Cache invalidation&lt;/h2&gt;

&lt;p&gt;Now, sometimes you need to expire the cache forcibly. For instance,
let’s say you know you’ve changed something in the database and that you
don’t want stale data to be served, you can invalidate the cache
manually. Or may be you want to invalidate a complete user cache at
login time.&lt;/p&gt;

&lt;p&gt;However, this is not easy in our case, since we want to remove all
entries matching &lt;code&gt;*:test:index&lt;/code&gt; (or &lt;code&gt;foo@bar.com:*&lt;/code&gt; if we want to
completely wipe out the user cache).&lt;/p&gt;

&lt;p&gt;The first idea that comes to mind is to use the Redis &lt;code&gt;KEYS&lt;/code&gt; command that can
accept globs to match key names, like &lt;code&gt;KEYS foo@bar.com:*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But in the documentation&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, you’ll find a big fat warning about KEYS: &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Warning: consider KEYS as a command that should only be used in production
environments with extreme care. It may ruin performance when it is executed
against large databases. This command is intended for debugging and special
operations, such as changing your keyspace layout. Don’t use KEYS in your
regular application code. If you’re looking for a way to find keys in a 
subset of your keyspace, consider using SCAN or sets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scary as it sounds.&lt;/p&gt;

&lt;h2 id=&quot;cursors-to-the-rescue&quot;&gt;Cursors to the rescue&lt;/h2&gt;

&lt;p&gt;REDIS comes with a nice, but not very known feature since v2.8: SCAN. The SCAN
command is a cursor based iterator. You give him a key pattern, and every time
you call it, it will return the next set of matching keys, and an index for the
next call.&lt;/p&gt;

&lt;p&gt;Here is a piece of code that can invalidate key wildcards from padrino :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controllers&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:invalidate_cache_like&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;REDIS_SERVER&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;REDIS_PORT&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can not easily invalidate a cache wildcard calling
&lt;code&gt;invalidate_cache_like&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;For instance, at user login, you could call :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;sb&quot;&gt;`invalidate_cache_like &amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_account&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;:test:index&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and the user cache is now cleared.&lt;/p&gt;

&lt;h2 id=&quot;benchmarking&quot;&gt;Benchmarking&lt;/h2&gt;

&lt;p&gt;Let’s play with &lt;code&gt;Benchmark&lt;/code&gt; a bit to compare &lt;code&gt;SCAN&lt;/code&gt; and &lt;code&gt;KEYS&lt;/code&gt; performance on a
moderately sized database. While we’re at it, we’ll also check these commands using &lt;code&gt;redis&lt;/code&gt; and &lt;code&gt;hiredis&lt;/code&gt; drivers, to see if it makes any difference.&lt;/p&gt;

&lt;p&gt;I used the following piece of code for that:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/env ruby&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hiredis&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;em-synchrony&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;redis&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;benchmark&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aaaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;zzzz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalidate_cache_cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalidate_cache_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wildcard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hiredis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hiredis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hiredis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:driver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;build_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;looping (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;):&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aaz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;invalidate_cache_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;build_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;scanning (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;):&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;aaz&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;invalidate_cache_cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After a few minutes running, I got those surprising results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./redis-expire-wildcard.rb 
                            user     system      total        real
looping (ruby):          0.040000   0.010000   0.050000 (  1.059056)
scanning (ruby):        49.000000  11.490000  60.490000 ( 61.113561)
looping (hiredis):       0.020000   0.010000   0.030000 (  1.073681)
scanning (hiredis):     19.680000  12.880000  32.560000 ( 44.972220)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, there is no much improvements using &lt;code&gt;hiredis&lt;/code&gt; over &lt;code&gt;redis&lt;/code&gt; when looping
in our case. This sounds legit, since we loop only 26 times here and the
&lt;code&gt;hiredis&lt;/code&gt; performance benefit doesn’t rise with so few commands (&lt;code&gt;hiredis&lt;/code&gt; does
a much more better job if you change the tested range so more commands are
issued).&lt;/p&gt;

&lt;p&gt;Second, using &lt;code&gt;SCAN&lt;/code&gt; here is &lt;em&gt;much&lt;/em&gt; slower than using &lt;code&gt;KEYS&lt;/code&gt; !&lt;/p&gt;

&lt;p&gt;So why use &lt;code&gt;SCAN&lt;/code&gt; instead of &lt;code&gt;KEYS&lt;/code&gt; ? The problem with &lt;code&gt;KEYS&lt;/code&gt; is that it will block your server while retrieving all the keys. The cursor based approach will return small chunks of keys and won’t block the server for the time of a whole key scan.&lt;/p&gt;

&lt;p&gt;However, handling cursor based expiration can be tricky in a web application.
Since it takes so much longer (but is friendlier to Redis), you might have to
handle it in a separate task from your application process (in Sidekiq for instance).&lt;/p&gt;

&lt;p&gt;It all depends on your app. You can start using simply &lt;code&gt;KEYS&lt;/code&gt;, but will have to
keep in mind that cursors will be needed if usage or concurrent trafic rises and
monitor your Redis statistics for this.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.padrinorb.com/&quot;&gt;http://www.padrinorb.com/&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/articles/expiring-redis-cache-from-ruby/&quot;&gt;Invalidating REDIS cache from Ruby&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on March 01, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Restoring Arch bootloader for the future self]]></title>
  <link rel="alternate" type="text/html" href="https://leucos.github.io/articles/restoring-arch-bootloader/" />
  <id>https://leucos.github.io/articles/restoring-arch-bootloader</id>
  <published>2015-02-14T00:00:00+01:00</published>
  <updated>2015-02-14T00:00:00+01:00</updated>
  <author>
    <name>Michel Blanc</name>
    <uri>https://leucos.github.io</uri>
    <email>mb@mbnet.fr</email>
  </author>
  <content type="html">
    &lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Grab latest Arch, create a bootable key (do this before you’re doomed)&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press F2 at boot, change the boot order to start on the key in &lt;strong&gt;UEFI&lt;/strong&gt; mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Boot on Arch, then&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/leucos/3f63c07d8326309d7fb1.js&quot;&gt; &lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;Cross fingers…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you need to reinstall all the things&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pacman -Sy &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;yaourt -Q &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s1&quot;&gt;&amp;#39;^aur&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep -v &lt;span class=&quot;s1&quot;&gt;&amp;#39;^local&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; cut -f2
-d&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{ print $1 }&amp;#39;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Multisystem is pretty handy for this. You can put several OSes on the key, and choose what to boot. &lt;a href=&quot;http://liveusb.info/dotclear/&quot;&gt;http://liveusb.info/dotclear/&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;if you don’t use &lt;code&gt;yaourt&lt;/code&gt;, remove the grep part &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;https://leucos.github.io/articles/restoring-arch-bootloader/&quot;&gt;Restoring Arch bootloader for the future self&lt;/a&gt; was originally published by Michel Blanc at &lt;a href=&quot;https://leucos.github.io&quot;&gt;Random stuff&lt;/a&gt; on February 14, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>